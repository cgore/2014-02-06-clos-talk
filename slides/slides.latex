% Copyright (c) 2014, Christopher Mark Gore,
% All rights reserved.
%
% 2317 South River Road, Saint Charles, Missouri 63303 USA.
% Web: http://cgore.com
% Email: cgore@cgore.com
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
%     * Redistributions of source code must retain the above copyright
%       notice, this list of conditions and the following disclaimer.
%
%     * Redistributions in binary form must reproduce the above copyright
%       notice, this list of conditions and the following disclaimer in the
%       documentation and/or other materials provided with the distribution.
%
%     * Neither the name of Christopher Mark Gore nor the names of other
%       contributors may be used to endorse or promote products derived from
%       this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.

\documentclass{seminar}

\usepackage{amsmath}
\usepackage[normalem]{ulem}
\usepackage{graphicx}
\usepackage[usenames,dvipsnames]{xcolor}
\usepackage{bookman}
\usepackage{amsfonts}
\usepackage{listings}
\usepackage[dvips]{pstricks}
\usepackage{relsize}
\usepackage{semcolor,slidesec}
\input{seminar.bug}
\input{seminar.bg2}
\usepackage[normalem]{ulem}

\definecolor{fillcolor}{rgb}{0.9,0.95,1.0}
\definecolor{linecolor}{rgb}{0.8,0.85,0.9}
\slideframe[\psset{fillcolor=fillcolor,linecolor=linecolor}]{scshadow}

\newcommand{\hc}{Blue}
\newcommand{\h}[1]{\slideheading{\textcolor{\hc}{#1}}}
\newcommand{\tq}[1]{\textcolor{Green}{\textbf{#1}}}
\newcommand{\tbd}[1]{\textcolor{Blue}{\textit{#1}}}
\newcommand{\TODO}{{\Huge \textcolor{Red}{\textbf{{TO DO}}}}}

\definecolor{commentcolor}{rgb}{0.1,0.1,0.4}
\definecolor{identifiercolor}{rgb}{0.2,0.2,0.2}
\definecolor{keywordcolor}{rgb}{0.1,0.3,0.1}
\definecolor{cexcolor}{rgb}{0.25,0.25,0.4}
\lstset{
  basicstyle=\small,
  language=Lisp,
  morekeywords={make-instance},
  escapeinside={\%*}{*)},
  commentstyle=\itshape\color{commentcolor},
  identifierstyle=\color{identifiercolor},
  keywordstyle=\color{keywordcolor}
}
\newcommand{\cex}[1]{\textcolor{cexcolor}{\textit{#1}}}

\title{\psshadowbox{CLOS: the Common Lisp Object System}}
\author{Christopher Mark Gore\\
  \texttt{http://www.cgore.com}\\
  \texttt{cgore@cgore.com}\\
  \raisebox{-2pt}{\includegraphics[height=10pt]{twitter-logo.eps}}
  \texttt{@cgore}}
\date{Thursday, February 6, {\smaller AD} 2014}

\begin{document}

\raggedslides[0mm]

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \color{\hc}

  \begin{center}
    \includegraphics[height=1.25in]{lambda-sticker-blue.eps}
  \end{center}

  \maketitle

  \color{Black}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Getting Started with Common Lisp}

  \begin{enumerate}
    \item Install Linux.\\
      \texttt{http://aptosid.com}
    \item Install SBCL and some libraries.\\
      \texttt{apt-get install sbcl\{,-doc,-source\} \textbackslash \\
        cl-\{asdf,cffi\}}
    \item Install Emacs and SLIME \textit{(Not strictly required.)}\\
      \texttt{apt-get install emacs\{,-goodies-el\} cl-swank \textbackslash \\
        cl-swank slime common-lisp-controller}
  \end{enumerate}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Lisp $+$ OOP $>$ OOP $-$ Lisp}

  \begin{center}
    \includegraphics[height=2.75in]{mccarthy-oop.eps}
  \end{center}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Lisp $+$ OOP $>$ Lisp?}

  \textit{[Opinionated opinion:]} Java or C++ style OOP doesn't help if you
  already have Lisp, and probably hurts, but the CLOS does help if you have the
  right sort of problem.

  \begin{itemize}
    \item Lisp is good at modeling computation.
    \item Functional programming is good at modeling verbs,
    \item Object-oriented programming is good at modeling nouns.
    \item CLOS allows FP for verbs and OOP for nouns to interact easily,
      with neither being the \textit{\textbf{King Of All The Words}}.
      (Cf. Steve Yegge's essay, \textit{Execution in the Kingdom of Nouns},
      \texttt{http://steve-yegge.blogspot.com\\
        /2006/03/execution-in-kingdom-of-nouns.html}).
  \end{itemize}  
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{OOP isn't \uline{\textit{The}} Answer}

  OOP is a useful tool, but it isn't the final solution to all things
  programming.  It won't solve world hunger, but it does solve a restricted
  subset of the problem.  Other things that are sometimes useful tools, but
  aren't \textbf{\textit{the}} answer:

  \begin{itemize}
    \item FP,
    \item Lack of side effects,
    \item Unit tests/TDD/BDD/\textbf{EXTREME PROGRAMMING!},
    \item Type systems,
    \item Monads,
    \item Your favorite thing in programming,
    \item \sout{Lisp.} \textit{[Yes it is.]}
  \end{itemize}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Ancient History}

  \begin{description}
    \item[Flavors] (before 1982) worked on MIT Lisp Machines.
      It introduced the concepts of multiple inheritance and mixins.
      \tbd{(for lisp?)}
      It used a message-passing paradigm similar to Smalltalk (before 1972).
    \item[LOOPS] worked on Xerox's Interlisp-D.
    \item[CommonLoops] got LOOPS working in Common Lisp.
    \item[New Flavors] (before 1985) introduced generic functions.
      \tbd{(for lisp?)}
    \item[Portable CommonLoops (PCL)]
      eventually developed into the first implementation of CLOS.
  \end{description}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Nouns and Verbs}

  \begin{description}
    \item[Nouns] are how our brain works with things.\\
      \textit{The \tq{cat} was asleep in the \tq{hallway}.}\\
      \texttt{\tq{cat[27]}.goToSleepInLocation(\tq{hallway[3]});}
    \item[Verbs] are how our brain works with actions.\\
      \textit{He \tq{murdered} her in cold blood!}\\
      \texttt{(with-person (the-man) (\tq{murder} the-woman))}
  \end{description}

  \h{Other Fun Parts of Speech \textellipsis}
  
  \begin{description}
    \item[Adjectives] describe nouns.\\
      \textit{The \tq{big}, \tq{old}, \tq{yellow} house burned to the ground.}\\
      \texttt{<house size="\tq{big}" age="\tq{old}" color="\tq{yellow}"/>}
    \item[Pronouns] \textit{(anaphors)} are shortcuts for nouns.\\
      \textit{\tq{We} walked down the street to meet \tq{him}.}\\
      \texttt{(a?if \tq{him} (person-to-meet?) (go-to-meet \tq{him}))}
  \end{description}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{\textellipsis\ Other Fun Parts of Speech}
  
  \begin{description}
    \item[Adverbs] change verbs.\\
      \textit{He \tq{quickly} ran down the street.}
    \item[Prepositions] links nouns and pronouns to other words.\\
      \textit{The book is \tq{beneath} the table.}
    \item[Conjunctions] link words, phrases, and clauses.\\
      \textit{I ate the pizza \tq{and} the pasta.}\\
      \texttt{int i = 12\tq{;} i++\tq{;}}\\
      \texttt{v = \tq{[}1\tq{,} 2\tq{,} 14\tq{]}}
    \item[Interjections] convey emotion.\\
      \textit{\tq{Hey!}  Put that down!} \\
      \texttt{i = 0x5f3759df - (i >> 1); \tq{// wtf?}}
  \end{description}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{OOP: How Classes See Their Methods}

  \begin{center}
    \includegraphics[height=2.75in]{cat-king.eps}
  \end{center}
\end{slide}

\begin{slide}
  \h{FP: How Functions See Their Data}

  \begin{center}
    \includegraphics[height=2.75in]{no-evil.eps}
  \end{center}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{The Basic Components in CLOS}

  \begin{description}
    \item[Classes] model nouns.
    \item[Instances] are specific occurrences of nouns.
    \item[Generics] model verbs. 
    \item[Methods] implement generics for specific classes.
  \end{description}

  The first two, classes, and instances, work as expected from any other normal
  OOP language.  Generics and methods work quite differently though.
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{\texttt{DEFCLASS}}

  We define new classes with the \texttt{defclass} macro.

\begin{lstlisting}
(defclass %*\cex{class-name}*) (%*\cex{superclass-names}*)) (%*\cex{slots}*)))
\end{lstlisting}

  Some examples:

\begin{lstlisting}
(defclass point () (x y))
(defclass shape () ()) ; An abstract base class.
(defclass rectangle (shape) (p q))
(defclass circle (shape) (center radius))
\end{lstlisting}

  We typically want to provide more for the slot definitions.

\begin{lstlisting}
(defclass better-point ()
          ((x :accessor x :initarg :x :initform 0.0
              :type float)
           (y :accessor y :initarg :y :initform 0.0
              :type float)))
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{\texttt{DEFCLASS} Slot Definition Options}

  All of these are optional.
  This is \textbf{\textit{not a hash map}},
  and some allow for multiple definitions.

  \begin{description}
    \item[:reader] Defines a default getter for the slot.
    \item[:writer] Defines a default setter for the slot.
    \item[:accessor] Defines both a default getter and a default setter.
    \item[:allocation] Either \texttt{:instance} for per-instance slots
      (this is the default) or \texttt{:class} for per-class slots.
    \item[:initarg]
      This is a symbol to specify an initial value when you call
      \texttt{make-instance}.
    \item[:initform] This is the default value at instantiation.
    \item[:type] This can be any valid type specifier.
    \item[:documentation] \textit{But I thought code documents itself?}
  \end{description}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{\texttt{MAKE-INSTANCE}}

  We create new instances of a class with \texttt{make-instance}.
  \textit{(The following examples assume more thorough slot definitions.)}

\begin{lstlisting}
(let* ((o (make-instance 'point)) ; Defaults to (0,0)
       (p (make-instance 'point :x 1.0 :y 12.5))
       (q (make-instance 'point :x 5.0 :y 10.0))
       (r (make-instance 'rectangle :p p :q q))
       (c (make-instance 'circle
                         :center o :radius 12.5)))
  (x p) ; Returns 1.0
  %* \cex{\textellipsis\ Do more stuff \textellipsis}*) )
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{\texttt{DEFGENERIC}}

  We define new generics with \texttt{defgeneric}.

\begin{lstlisting}
(defgeneric %*\cex{generic-name}*) %*\cex{lambda-list}*))
\end{lstlisting}

  Some examples:

\begin{lstlisting}
(defgeneric min-x (thing))
(defgeneric max-x (thing))
(defgeneric min-y (thing))
(defgeneric max-y (thing))
(defgeneric height (thing))
(defgeneric width (thing))
(defgeneric area (thing))
\end{lstlisting}

  These define the general layout of a set of methods all with the same name.
  \textit{(SBCL will implicitly create them for you, with a warning.)}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{\texttt{DEFMETHOD}}

  We define new methods with \texttt{defmethod}.

\begin{lstlisting}
(defmethod min-x ((r rectange))
  (min (x (p r)) (x (q r))))
\end{lstlisting}

  Implement \texttt{max-x}, \texttt{min-y}, and \texttt{max-y} in a similar manner.

\begin{lstlisting}
(defmethod height ((r rectangle))
  (- (max-y r) (min-y r))
(defmethod width ((r rectangle))
  (- (max-x r) (min-x r)))
(defmethod area ((c circle))
  (* pi (expt (radius c) 2)))
(defmethod area ((r rectangle))
  (* (height r) (width r)))
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Multiple Inheritance \textellipsis}

  CLOS supports multiple inheritance, like C++ or Python.  Java and Ruby
  \textit{don't} have this, and I miss it when it isn't there.

\begin{lstlisting}
(defclass animal () ())

(defclass swimming-animal (animal) ())
(defclass fish (swimming-animal) ())

(defclass winged-animal (animal) ())
(defclass bird (winged-animal) ())
(defclass penguin (bird swimming-animal) ())

(defclass mammal (animal) ())
(defclass whale (swimming-animal mammal) ())
(defclass bat (winged-animal mammal) ())
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{\textellipsis\ Multiple Inheritance}

\begin{lstlisting}
(defclass device () ())

(defclass computer (device) ())
(defclass desktop (computer) ())
(defclass laptop (computer) ())

(defclass printer (device) ())
(defclass scanner (device) ())
(defclass fax (device) ())

(defclass all-in-one (printer scanner fax) ())
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Multiple Dispatch: OOP Without the Self}

\begin{center}
  \textit{``The self is a relation which relates itself to its own self,\\
    or it is that in the relation\\
    that the relation relates itself to its own self;\\
    the self is not the relation\\
    but that the relation relates itself to its own self.''}
\end{center}

\begin{flushright}
  --- S\o ren Kierkegaard.
\end{flushright}

Single dispatch OOP assumes there is some special thing, the \texttt{self} or
\texttt{this}.  You can do this in CLOS too, by only specializing on the first
argument to the methods, but then you are missing one of the best features of
the CLOS.

\begin{lstlisting}
(defmethod foo ((this square) x y) %*\cex{\textellipsis}*))
\end{lstlisting}
\begin{lstlisting}[language=C]
my_square.foo(x, y); // But what about x and y?
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Let's Play a Game \textellipsis}

  We can specialize on the classes of \textbf{\textit{every argument}}.

\begin{lstlisting}[basicstyle=\smaller]
(defclass rock     () ())
(defclass paper    () ())
(defclass scissors () ())
(defclass lizard   () ())
(defclass spock    () ())

(defgeneric play (a b))
(defmethod play (a b)
  (play b a)) ; Switch if no match.

(defmethod play ((a rock)     (b rock))     'tie)
(defmethod play ((a paper)    (b paper))    'tie)
(defmethod play ((a scissors) (b scissors)) 'tie)
(defmethod play ((a lizard)   (b lizard))   'tie)
(defmethod play ((a spock)    (b spock))    'tie)
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{\textellipsis\ Let's Play a Game}

\begin{lstlisting}
(defmethod play ((r  rock)     (sz scissors)) 'rock)
(defmethod play ((p  paper)    (sz scissors)) 'scissors)
(defmethod play ((r  rock)     (p  paper))    'paper)
(defmethod play ((r  rock)     (l  lizard))   'rock)
(defmethod play ((l  lizard)   (sp spock))    'spock)
(defmethod play ((sp spock)    (sz scissors)) 'spock)
(defmethod play ((sz scissors) (l  lizard))   'scissors)
(defmethod play ((l  lizard)   (p  paper))    'lizard)
(defmethod play ((p  paper)    (sp spock))    'paper)
(defmethod play ((sp spock)    (r  rock))     'spock)
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{No Enforced Encapsulation}

\begin{lstlisting}
(defclass sphere ()
  ((x :initarg :x)
   (y :initarg :y)
   (z :initarg :z)
   (r :initarg :r)) ; No accessors defined!
(let ((s1 (make-instance 'sphere
            :x 12.66 :y 16.07 :z 22.01 :r 14.70)))
  (setf (slot-value s1 'radius) ; That was easy.
        (* 2.7 (slot-value s1 'x))))
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Lambdas in Slots}

  You won't typically do this for code you write, but the code your code writes
  might like to do something similar.

\begin{lstlisting}
(defclass j ()
  ((x :accessor x :initarg :x :initform 0.0 :type float)
   (y :accessor y :initarg :y :initform 0.0 :type float)
   (f :initform (lambda (this z)
                  (expt (+ (x this) (y this)) z)))))
(defgeneric f (this z))
(defmethod f ((this j) z)
  (funcall (slot-value this 'f) this z))
(let ((j1 (make-instance 'j :x 12 :y 33)))
  (f j1 7)) ; Returns 373,669,453,125.
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{MOP: The Meta Object Protocol}

  The CLOS is implemented in it.

  It's crazy!

  Perhaps another day.
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \begin{center}
    \textcolor{\hc}{\textbf{\emph{\Huge{Questions?}}}}
  \end{center}
\end{slide}

\end{document}
